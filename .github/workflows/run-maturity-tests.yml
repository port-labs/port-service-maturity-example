name: Run service maturity tests

on:
  workflow_dispatch:

jobs:
  check-has-readme:
    uses: ./.github/workflows/check-has-readme.yml
    secrets: 
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

  check-snyk-vulnerabilities-python:
    uses: ./.github/workflows/check-snyk-vulnerabilities-python.yml
    secrets: 
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
  calculate-final-score:
    needs: [check-has-readme, check-snyk-vulnerabilities-python]
    runs-on: ubuntu-latest
    steps:
      - id: search-checks
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: SEARCH
          query:  |
            {
               "combinator": "or",
               "rules": [{ "operator": "=", "value": "Check", "property": "$blueprint"}] 
            }
      - id: search-check-runs
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: SEARCH
          query:  |
            { 
              "combinator": "or",
              "rules": [
                { "operator": "=", "value": "CheckRuns", "property": "$blueprint"},
                { "operator": "relatedTo", "blueprint": "Service", "value": "payment-service" }
              ]
            }            
      - name: Get all checks and latest runs on the service
        run: |
          checks = sorted(${{ steps.search-checks.outputs.entities }}, key=lambda check: check["tier"], reverse=True)
          finalTier = checks[0]["tier"]
          for check in checks:
            currentCheckCheckRuns = [checkRun for checkRun in ${{ steps.search-check-runs.outputs.entities }} if checkRun["relations"]["check"] == check["identifier"]] 
            latestCheckRun = max(currentCheckCheckRuns, key=lambda checkRun: checkRun["createdAt"])
            if latestCheckRun["properties"]["status"] == "success": 
              finalTier = check["tier"]
            else:
              break
          print(f`::set-output name=final-tier::{finalTier}`)
        shell: python